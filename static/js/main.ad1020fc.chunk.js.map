{"version":3,"sources":["components/Header/index.js","utils/EmployeeInfoContext.js","components/EmployeeBody/index.js","components/EmployeeTable/index.js","components/SearchBar/index.js","components/Nav/index.js","utils/API.js","components/EmployeeInfo/index.js","components/Main/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","EmployeeInfoContext","React","createContext","EmployeeBody","context","useContext","undefined","developerState","filteredUsers","name","map","login","picture","phone","email","dob","key","uuid","data-th","src","medium","alt","first","last","href","target","date","dateArray","split","year","join","formatDate","EmployeeTable","id","headings","width","style","onClick","handleSort","toLowerCase","SearchBar","type","placeholder","aria-label","onChange","e","handleSearchChange","Nav","axios","get","EmployeeInfo","useState","users","order","setDeveloperState","useEffect","API","then","results","data","Provider","value","event","filter","filteredList","item","indexOf","heading","sortedUsers","sort","a","b","localeCompare","length","Main","Wrapper","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad1020fc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header () {\n    return (\n        <div className=\"header\">\n            <h1>Employee Directory</h1>\n            <p>Click on the name heading to filter or use the search box to narrow your results</p>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst EmployeeInfoContext = React.createContext({\n\n});\n\nexport default EmployeeInfoContext;","import React, { useContext } from \"react\";\nimport \"./EmployeeBody.css\"\nimport EmployeeInfoContext from \"../../utils/EmployeeInfoContext\"\n\nconst EmployeeBody = () => {\n    const context = useContext(EmployeeInfoContext);\n\n    function formatDate(date){\n        const dateArray = date.split(\"-\");\n        const year = dateArray[0];\n        const month = dateArray[1];\n        const dayArray = dateArray[2].split(\"T\");\n        const day = dayArray[0];\n        const formattedDate =[month, day, year].join(\"-\");\n        return formattedDate;\n    }\n    return (\n        <tbody>\n        {context.developerState.filteredUsers[0] !== undefined && context.developerState.filteredUsers[0].name !== undefined ? (\n          context.developerState.filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\n            return (\n              <tr key={login.uuid}>\n                <td data-th=\"Image\" className=\"align-middle\">\n                  <img\n                    src={picture.medium}\n                    alt={\"profile image for \" + name.first + \" \" + name.last}\n                    className=\"img-responsive\"\n                  />\n                </td>\n                <td data-th=\"Name\" className=\"name-cell align-middle\">\n                  {name.first} {name.last}\n                </td>\n                <td data-th=\"Phone\" className=\"align-middle\">\n                  {phone}\n                </td>\n                <td data-th=\"Email\" className=\"align-middle\">\n                  <a href={\"mailto:\" + email} target=\"__blank\">\n                    {email}\n                  </a>\n                </td>\n                <td data-th=\"DOB\" className=\"align-middle\">\n                  {formatDate(dob.date)}\n                </td>\n              </tr>\n            );\n          })\n        ) : (\n          <></>\n        )}\n      </tbody>\n    );\n  }\n  \n  export default EmployeeBody;","import React, { useContext } from \"react\";\nimport EmployeeBody from \"../EmployeeBody\";\nimport \"./EmployeeTable.css\";\nimport EmployeeInfoContext from \"../../utils/EmployeeInfoContext\";\n\nconst EmployeeTable = () => {\n    const context = useContext(EmployeeInfoContext);\n\n    return (\n\n        <div className=\"datatable mt-5\">\n            <table\n                id=\"table\"\n                className=\"table table-striped table-hover table-condensed\"\n            >\n                <thead>\n                    <tr>\n                        {context.developerState.headings.map(({ name, width }) => {\n                            return (\n                                <th\n                                    className=\"col\"\n                                    key={name}\n                                    style={{ width }}\n                                    onClick={() => {\n                                        context.handleSort(name.toLowerCase());\n                                    }}\n                                >\n                                    {name}\n                                    <span className=\"pointer\"></span>\n                                </th>\n                            );\n                        })}\n                    </tr>\n                </thead>\n\n                <EmployeeBody />\n            </table>\n        </div>\n    );\n}\n\nexport default EmployeeTable;","import React, { useContext } from \"react\";\nimport \"./SearchBar.css\";\nimport EmployeeInfoContext from \"../../utils/EmployeeInfoContext\";\n\nconst SearchBar = () => {\n    const context = useContext(EmployeeInfoContext);\n\n    return (\n        <div className=\"searchbox\">\n            <form className=\"form-inline\">\n                <input\n                    className=\"form-control mr-sm-2\"\n                    type=\"search\"\n                    placeholder=\"Enter Name\"\n                    aria-label=\"Search\"\n                    onChange={e => context.handleSearchChange(e)}\n                />\n                \n                <button className=\"btn my-2 my-sm-0\" type=\"submit\">\n                    Search For Employee\n                 </button>\n            </form>\n        </div>\n    );\n}\nexport default SearchBar;","import React from 'react';\nimport SearchBar from \"../SearchBar\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n\n       <div className=\"search-area col-4\">\n        <SearchBar />\n    </div>\n</nav>\n    );\n}\nexport default Nav;","import axios from 'axios';\n\nexport default {\n    getUsers: function() {\n\n        return axios.get('https://randomuser.me/api/?results=200&nat=us');\n\n    }\n}","import React, {useState, useEffect} from \"react\";\nimport EmployeeTable from \"../EmployeeTable\";\nimport Nav from \"../Nav\";\nimport API from \"../../utils/API\";\nimport \"./EmployeeInfo.css\";\nimport EmployeeInfoContext from \"../../utils/EmployeeInfoContext\"\n\nconst EmployeeInfo = () => {\n      const [developerState, setDeveloperState] = useState({\n        users: [],\n        order: \"ascend\",\n        filteredUsers: [],\n        headings: [\n          { name: \"Image\", width: \"10%\", },\n          { name: \"Name\", width: \"10%\", },\n          { name: \"Phone\", width: \"20%\", },\n          { name: \"Email\", width: \"20%\", },\n          { name: \"DOB\", width: \"10%\", }\n        ]\n      });\n    \n      const handleSort = heading => {\n        if (developerState.order === \"descend\") {\n            setDeveloperState({\n                order:\"ascend\"\n            })\n        } else{\n            setDeveloperState({\n                order:\"descend\"\n            })\n        }\n    \n        const compareFnc = (a, b) => {\n          if (developerState.order === \"ascend\") {\n            if (a[heading] === undefined) {\n              return 1;\n            } else if (b[heading] === undefined) {\n              return -1;\n            } else if (heading === \"name\") {\n              return a[heading].first.localeCompare(b[heading].first);\n            } else {\n              return b[heading] - a[heading];\n            } \n          } else {\n        if (a[heading] === undefined){\n            return 1;\n        } else if (b[heading] === undefined){\n            return -1;\n        } else if (heading ===\"name\"){\n            return b[heading].first.localeCompare(a[heading].first);\n        } else {\nreturn b[heading]-  a[heading];\n        }\n    }\n    }\n        const sortedUsers = developerState.filteredUsers.sort(compareFnc);\n\n        setDeveloperState({\n          ...developerState,\n          filteredUsers: sortedUsers\n});\n\n };\n   \n      const handleSearchChange = event => {\n        const filter = event.target.value;\n        const filteredList = developerState.users.filter(item => {\n          let values = item.name.first.toLowerCase();\n          return values.indexOf(filter.toLowerCase()) !== -1;\n        });\n    \n        setDeveloperState({ \n        ...developerState, \n        filteredUsers: filteredList });\n      };\n\n      useEffect(() => {\n        API.getUsers().then(results => {\n          setDeveloperState({\n            ...developerState,\n            users: results.data.results,\n            filteredUsers: results.data.results\n          });\n        });\n      }, []);\n    \n      return (\n        <EmployeeInfoContext.Provider\n          value={{ developerState, handleSearchChange, handleSort }}\n        >\n          <Nav />\n          <div className=\"data-area\">\n            {developerState.filteredUsers.length > 0 \n    ? <EmployeeTable />\n     : <div></div>\n     }\n          </div>\n        </EmployeeInfoContext.Provider>\n      );\n    }\n    \n    export default EmployeeInfo;","import React from \"react\";\nimport EmployeeInfo from \"../EmployeeInfo/index.js\";\nimport \"./Main.css\";\n\nfunction Main (){\n    return (\n        <>\n        <EmployeeInfo />\n        </>\n    );\n};\n\nexport default Main;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nfunction Wrapper ({ children }){\n    return (\n        <div className=\"wrapper\">\n            { children }\n        </div>\n    );\n}\nexport default Wrapper;","import React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Wrapper from './components/Wrapper';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <Wrapper>\n                <Header />\n                <Main />\n            </Wrapper>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}